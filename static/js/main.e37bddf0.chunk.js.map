{"version":3,"sources":["App.js","index.js"],"names":["App","state","count","max","goingUp","playing","whichAnimation","visibility","opacity","playVisibility","stopVisibility","reset","clearInterval","interval","setState","onChange","e","name","target","value","parseInt","startCycle","setInterval","ballStyles","animationPlayState","this","animationDuration","animationName","display","animationTimingFunction","transition","msgStyles","playButtonStyles","stopButtonStyles","className","style","type","min","step","id","onClick","Component","ReactDOM","render","document","getElementById"],"mappings":"sNAkKeA,G,MA9JN,iKA6EJ,OA7EI,oCAGLC,MAAQ,CACJC,MAAO,EACPC,IAAK,GACLC,SAAS,EACTC,QAAS,SACTC,eAAgB,GAChBC,WAAY,OACZC,QAAS,KACTC,eAAgB,eAChBC,eAAgB,QACnB,EAGDC,MAAQ,WAGJC,cAAc,EAAKC,UAGnB,EAAKC,SAAS,CACVZ,MAAO,EACPG,QAAS,SACTC,eAAgB,GAChBC,WAAY,OACZC,QAAS,KACTC,eAAgB,eAChBC,eAAgB,UAEvB,EAGDK,SAAW,SAACC,GACR,IAAMC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQC,SAASJ,EAAEE,OAAOC,OAChC,EAAKL,SAAS,eACTG,EAAOE,IACZ,EAAKR,SACR,EAGDU,WAAa,WACT,EAAKP,SAAS,CACVT,QAAS,UACTE,WAAY,QACZC,QAAS,OACTF,eAAgB,QAChBF,SAAS,EACTK,eAAgB,OAChBC,eAAgB,iBAGpB,EAAKG,SAAWS,aAAY,YACG,IAAvB,EAAKrB,MAAMG,QACP,EAAKH,MAAMC,MAAQ,EAAKD,MAAME,IAC9B,EAAKW,SAAS,CAAEZ,MAAO,EAAKD,MAAMC,MAAQ,IACnC,EAAKD,MAAMC,QAAU,EAAKD,MAAME,KACvC,EAAKW,SAAS,CACVV,SAAS,EACTF,MAAO,EAAKD,MAAME,IAAM,EACxBG,eAAgB,cAGM,IAAvB,EAAKL,MAAMG,UACd,EAAKH,MAAMC,MAAQ,EACnB,EAAKY,SAAS,CAAEZ,MAAO,EAAKD,MAAMC,MAAQ,IACd,IAArB,EAAKD,MAAMC,OAClB,EAAKY,SAAS,CACVV,SAAS,EACTF,MAAO,EACPI,eAAgB,aAI7B,MACN,EA8EA,OA9EA,mCAED,WAGI,IAAMiB,EAAa,CACfC,mBAAoBC,KAAKxB,MAAMI,QAC/BqB,kBAAkB,GAAD,OAAKD,KAAKxB,MAAME,IAAG,KACpCwB,cAAeF,KAAKxB,MAAMK,eAC1BsB,QAASH,KAAKxB,MAAMM,WACpBsB,wBAAyB,SACzBC,WAAY,oBAGVC,EAAY,CACdvB,QAASiB,KAAKxB,MAAMO,QACpBsB,WAAY,oBAGVE,EAAmB,CACrBJ,QAASH,KAAKxB,MAAMQ,gBAGlBwB,EAAmB,CACrBL,QAASH,KAAKxB,MAAMS,gBAIxB,OACE,yBAAKwB,UAAU,OACD,yBAAKA,UAAU,gBACzB,wBAAIC,MAAOJ,GAAW,IAAEN,KAAKxB,MAAMC,MAAM,MAE3C,yBAAKgC,UAAU,mBACb,6BACE,2BACEE,KAAK,QACLjB,MAAOM,KAAKxB,MAAME,IAClBc,KAAK,MACLF,SAAUU,KAAKV,SACfsB,IAAI,IACJlC,IAAI,KACJmC,KAAK,MAEP,8BAAOb,KAAKxB,MAAME,IAAI,mBAExB,6BACE,4BACEoC,GAAG,aACHJ,MAAOH,EACPQ,QAASf,KAAKJ,YAEd,uBAAGa,UAAU,eAAc,MAE7B,4BACEK,GAAG,aACHJ,MAAOF,EACPO,QAASf,KAAKd,OAEd,uBAAGuB,UAAU,eAAc,QAIjC,yBAAKA,UAAU,cACb,wBAAIC,MAAOJ,IAEe,IAAvBN,KAAKxB,MAAMG,QAAmB,SAAW,WAG9C,yBAAK8B,UAAU,iBACb,yBAAKA,UAAU,eACb,yBAAKA,UAAU,OAAOC,MAAOZ,WAOxC,EA3JI,CAASkB,cCAlBC,IAASC,OAAO,kBAAC,EAAG,MAAKC,SAASC,eAAe,U","file":"static/js/main.e37bddf0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\n// class-based React component\nclass App extends Component {\n\n    // declare key-value pairs for initial app state\n    state = {\n        count: 1,\n        max: 10,\n        goingUp: true,\n        playing: 'paused',\n        whichAnimation: '',\n        visibility: 'none',\n        opacity: '0%',\n        playVisibility: 'inline-block',\n        stopVisibility: 'none'\n    }\n\n    // set app state values back to default\n    reset = () => {\n\n        // stops animation cycle\n        clearInterval(this.interval);\n\n        // resets default values\n        this.setState({\n            count: 1,\n            playing: 'paused',\n            whichAnimation: '',\n            visibility: 'none',\n            opacity: '0%',\n            playVisibility: 'inline-block',\n            stopVisibility: 'none'\n        });\n    }\n\n    // declare handler for changes to slider input\n    onChange = (e) => {\n        const name = e.target.name;\n        const value = parseInt(e.target.value);\n        this.setState({\n            [name]: value });\n        this.reset();\n    }\n\n    // declare function to start animation cycle\n    startCycle = () => {\n        this.setState({\n            playing: 'running',\n            visibility: 'block',\n            opacity: '100%',\n            whichAnimation: 'swell',\n            goingUp: true,\n            playVisibility: 'none',\n            stopVisibility: 'inline-block'\n        });\n\n        this.interval = setInterval(() => {\n            if (this.state.goingUp === true) {\n                if (this.state.count < this.state.max) {\n                    this.setState({ count: this.state.count + 1 });\n                } else if (this.state.count === this.state.max) {\n                    this.setState({\n                        goingUp: false,\n                        count: this.state.max - 1,\n                        whichAnimation: 'contract'\n                    });\n                }\n            } else if (this.state.goingUp === false) {\n                if (this.state.count > 0) {\n                    this.setState({ count: this.state.count - 1 });\n                } else if (this.state.count === 0) {\n                    this.setState({\n                        goingUp: true,\n                        count: 1,\n                        whichAnimation: 'swell'\n                    });\n                }\n            }\n        }, 1000);  // sets interval to 1 second\n    }\n\n    render() {\n        \n        // configure dynamic styles\n        const ballStyles = {\n            animationPlayState: this.state.playing,\n            animationDuration: `${this.state.max}s`,\n            animationName: this.state.whichAnimation,\n            display: this.state.visibility,\n            animationTimingFunction: 'linear',\n            transition: '.25s ease-in-out'\n        }\n\n        const msgStyles = {\n            opacity: this.state.opacity,\n            transition: '.25s ease-in-out'\n        }\n\n        const playButtonStyles = {\n            display: this.state.playVisibility\n        }\n\n        const stopButtonStyles = {\n            display: this.state.stopVisibility\n        }\n\n        // define app markup\n        return (\n          <div className=\"App\">\n                        <div className=\"breath-count\">\n              <h3 style={msgStyles}> {this.state.count} </h3>\n            </div>\n            <div className=\"breath-controls\">\n              <div>\n                <input\n                  type=\"range\"\n                  value={this.state.max}\n                  name=\"max\"\n                  onChange={this.onChange}\n                  min=\"0\"\n                  max=\"20\"\n                  step=\"1\"\n                />\n                <span>{this.state.max} second breath</span>\n              </div>\n              <div>\n                <button\n                  id=\"playButton\"\n                  style={playButtonStyles}\n                  onClick={this.startCycle}\n                >\n                  <i className=\"fas fa-play\"> </i>\n                </button>\n                <button\n                  id=\"stopButton\"\n                  style={stopButtonStyles}\n                  onClick={this.reset}\n                >\n                  <i className=\"fas fa-stop\"> </i>\n                </button>\n              </div>\n            </div>\n            <div className=\"breath-msg\">\n              <h3 style={msgStyles}>\n                \n                {this.state.goingUp === true ? \"inhale\" : \"exhale\"}\n              </h3>\n            </div>\n            <div className=\"breath-visual\">\n              <div className=\"ball-parent\">\n                <div className=\"ball\" style={ballStyles}>\n                  \n                </div>\n              </div>\n            </div>\n          </div>\n        );\n    }\n};\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}